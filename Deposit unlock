// Function to generate mock game result data for testing or fallback scenarios
    function fetchMockGameResult() {
        const currentTimestamp = Math.floor(Date.now() / 1000);
        // Simulate incrementing issue number for uniqueness to ensure new periods are always generated
        const mockIssueNumber = lastFetchedPeriod ? (BigInt(lastFetchedPeriod) + 1n).toString() : '20240701001';
        const mockNumber = Math.floor(Math.random() * 10); // Random number between 0-9
        console.log("Using mock data for game result.");
        return {
            issueNumber: mockIssueNumber,
            number: mockNumber.toString(),
            openTime: new Date(currentTimestamp * 1000).toLocaleString(),
        };
    }

    // Fetches game results from the NEW API or falls back to mock data on error/empty response
    async function fetchGameResult() {
      try {
        const timestamp = Date.now();
        const response = await fetch(https://draw.ar-lottery01.com/WinGo/WinGo_1M/GetHistoryIssuePage.json?ts=${timestamp});
        const data = await response.json();
        // Check if data or data.list is missing/empty, then fall back to mock data
        if (!data?.data?.list || data.data.list.length === 0) {
            console.warn('API returned no list data or empty list. Falling back to mock data.');
            return fetchMockGameResult();
        }
        return data.data.list[0]; // Return the most recent game result
      } catch (e) {
        console.error('API error (likely CORS/network issue or invalid URL):', e);
        // Fallback to mock data if fetch operation fails (e.g., network down, CORS blocked)
        return fetchMockGameResult();
      }
    }
